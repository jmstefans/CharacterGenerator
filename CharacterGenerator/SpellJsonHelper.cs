// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var spellJsonHelper = SpellJsonHelper.FromJson(jsonString);

namespace CharacterGenerator
{

    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Globalization;

    public partial class SpellJsonHelper
    {
        public Spells Spells { get; set; }
    }

    public class Spells
    {
        public string Cantrips { get; set; }

        public string Level1 { get; set; }

        public string Level2 { get; set; }

        public string Level3 { get; set; }

        public string Level4 { get; set; }

        public string Level5 { get; set; }

        public string Level6 { get; set; }

        public string Level7 { get; set; }

        public string Level8 { get; set; }

        public string Level9 { get; set; }

        public string Caster { get; set; }

        public bool ShouldSerializeCantrips()
        {
            return !string.IsNullOrWhiteSpace(Cantrips);
        }

        public bool ShouldSerializeLevel1()
        {
            return !string.IsNullOrWhiteSpace(Level1);
        }

        public bool ShouldSerializeLevel2()
        {
            return !string.IsNullOrWhiteSpace(Level2);
        }

        public bool ShouldSerializeLevel3()
        {
            return !string.IsNullOrWhiteSpace(Level3);
        }

        public bool ShouldSerializeLevel4()
        {
            return !string.IsNullOrWhiteSpace(Level4);
        }

        public bool ShouldSerializeLevel5()
        {
            return !string.IsNullOrWhiteSpace(Level5);
        }

        public bool ShouldSerializeLevel6()
        {
            return !string.IsNullOrWhiteSpace(Level6);
        }

        public bool ShouldSerializeLevel7()
        {
            return !string.IsNullOrWhiteSpace(Level7);
        }

        public bool ShouldSerializeLevel8()
        {
            return !string.IsNullOrWhiteSpace(Level8);
        }

        public bool ShouldSerializeLevel9()
        {
            return !string.IsNullOrWhiteSpace(Level9);
        }

        public bool ShouldSerializeCaster()
        {
            return !string.IsNullOrWhiteSpace(Caster);
        }
    }

    public partial class SpellJsonHelper
    {
        public static SpellJsonHelper FromJson(string json) => JsonConvert.DeserializeObject<SpellJsonHelper>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this SpellJsonHelper self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
